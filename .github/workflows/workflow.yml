name: Flutter

on:
  push:
    branches: [ "master" ]

jobs:
  flutter_job:
    runs-on: ubuntu-latest

    steps:
      # Clones the project on the machine
      - uses: actions/checkout@v4

      # Sets up Java 18
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '18'

      # Installs Flutter and related dependencies
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'

      # Fetches project dependencies
      - name: Install dependencies
        run: flutter pub get

      # Verifies if the Dart code is formatted well
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      # Checks for semantic errors
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

      # Runs unit tests
      - name: Run tests
        run: flutter test

      # Build APK split by ABI
      - name: Build APK split by ABI
        run: flutter build apk --split-per-abi

      # Upload split APKs as artifacts
      - name: Upload ARM64 APK
        uses: actions/upload-artifact@v4
        with:
          name: app-arm64-v8a-release
          path: build/app/outputs/apk/release/app-armeabi-v7a-release.apk

      - name: Upload ARMEABI APK
        uses: actions/upload-artifact@v4
        with:
          name: app-armeabi-v7a-release
          path: build/app/outputs/apk/release/app-arm64-v8a-release.apk

      - name: Upload x86_64 APK
        uses: actions/upload-artifact@v4
        with:
          name: app-x86_64-release
          path: build/app/outputs/apk/release/app-x86_64-release.apk

      # Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # Check if tag exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Modify tag if it exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # Create GitHub release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/app/outputs/apk/release/app-armeabi-v7a-release.apk
            build/app/outputs/apk/release/app-arm64-v8a-release.apk
            build/app/outputs/apk/release/app-x86_64-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: "This is a release for version v${{ env.VERSION }}"
          prerelease: false
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}