# Note: In a yml each level is padded by 2 spaces
name: Flutter

on:
  # Runs this action when you push on master
  push:
    branches: [ "master" ]


jobs:
  flutter_job:

    # The machine, we can also use windows-latest or ubuntu-latest
    # We are choosing macos-latest because we will be also building for iOS
    runs-on: ubuntu-latest

    steps:

      # Clones the project on the machine
      - uses: actions/checkout@v4

      # Sets up java 11
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '18'

      # Installs flutter and related dependency on this machine
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          #channel: 'stable'
          flutter-version: '3.29.0'
          # ^ If you want to use a specific version of flutter

      # Fetches proj dependencies from pub
      - name: Install dependencies
        run: flutter pub get
        # ^ If you want to use a specific version of flutter

      # Verifies if the dart code is formatted well
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if the any code is not well formatted
        # --output=none prints files which needs to be formatted

      # Checks for Symantic errors. Can be configured using analysis_options.yaml
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos --no-fatal-warnings
        # optionally use --fatal-warnings to stop execution if any warnings are found

      # Runs unit test
      - name: Run tests
        run: flutter test

      - name: Build apk
        run: flutter build apk

      - uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

      #      - name: Get last release
      #        id: last_release
      #        run: echo "::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
      #
      #      - name: Determine next version
      #        id: next_version
      #        run: echo "::set-output name=next_version::$(echo ${{ steps.last_release.outputs.tag }} | awk -F '.' '{print "v"$1"."$2+1".0"}')"

      #9 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk

        #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

        #13 Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: "This is a release for version v${{ env.VERSION }}"
          prerelease: false
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}